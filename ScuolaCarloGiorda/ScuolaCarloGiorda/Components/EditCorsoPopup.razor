@using System.ComponentModel.DataAnnotations
@using ScuolaCarloGiorda.Models
@using ScuolaCarloGiorda.Services
@inject CorsiService _corsiService
@inject AllieviService _allieviService
@inject IstruttoriService _istruttoriService

<EditForm Model="@Corso" OnValidSubmit="@(SaveForm)">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="modal" role="dialog" style="display:block; overflow: auto" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Anagrafica Corso</h3>
                </div>
                <div class="modal-body">

                    <ul class="nav nav-tabs">
                        <li class="nav-item">
                            <a class="@_cssGeneral" @onclick="@(ShowGeneral)">Generale</a>
                        </li>
                        <li class="nav-item">
                            <a class="@_cssInstructors" @onclick="@(ShowInstructors)">Elenco Istruttori</a>
                        </li>
                        <li class="nav-item">
                            <a class="@_cssStudents" @onclick="@(ShowStudents)">Elenco Allievi</a>
                        </li>

                        <li class="nav-item">
                            <a class="@_cssTrips" @onclick="@(ShowTrips)">Uscite</a>
                        </li>
                        <li class="nav-item">
                            <a class="@_cssInstructorsPresence" @onclick="@(ShowInstructorPresence)">Presenza Istruttori</a>
                        </li>
                        <li class="nav-item">
                            <a class="@_cssStudentsPresence" @onclick="@(ShowStudentsPresence)">Presenza Allievi</a>
                        </li>


                    </ul>
                    @if (_showGeneral)
                    {
                        <div class="form-group">
                            <label>Nome:</label>
                            <InputText class="form-control" @bind-Value="Corso.Name"/>
                        </div>
                        <div class="form-group">
                            <label>>Tipo Corso:</label>
                            <InputSelect class="form-control" @bind-Value="Corso.TipoCorso">
                                <option value="@TipoCorso.A1">A1</option>
                                <option value="@TipoCorso.AL1">AL1</option>
                                <option value="@TipoCorso.AR1">AR1</option>
                                <option value="@TipoCorso.SA1">SA1</option>
                                <option value="@TipoCorso.SA2">SA2</option>
                            </InputSelect>
                        </div>
                    }
                    @if (_showInstructors)
                    {
                        <ListSelector TItem="Istruttore" LabelProperty="istruttore => istruttore.Nome" Items="@_instructors" Value="Corso.Istruttori" ValueChanged="OnInstructorsListChanged"></ListSelector>
                    }
                    @if (_showStudents)
                    {
                        <InputFile OnChange="@LoadFiles"/>
                        <table>
                            <thead>
                            <th>Cognome</th>
                            </thead>
                            <tbody>
                            @foreach (Allievo allievo in Corso.Allievi)
                            {
                                <tr>
                                    <td>@allievo.Cognome</td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    }
                    @if (_showTrips)
                    {
                        <button type="button" class="btn btn-primary" @onclick="@(() => OpenTripPopup(null))">Crea Uscita</button>
                        <table>
                            <thead>
                            <th>Data</th>
                            <th>Luogo</th>
                            </thead>
                            <tbody>
                            @foreach (Uscita uscita in Corso.Uscite)
                            {
                                <tr>
                                    <td>@uscita.Data</td>
                                    <td>@uscita.Luogo</td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    }
                    @if (_showInstructorsPresence)
                    {
                        <DataGrid TRow="Istruttore" TColumn="Uscita" Columns="Corso.Uscite" Rows="Corso.Istruttori"></DataGrid>
                    }
                    @if (_showStudentsPresence)
                    {
                        <DataGrid TRow="Allievo" TColumn="Uscita" Columns="Corso.Uscite" Rows="Corso.Allievi"></DataGrid>
                    }

                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary fas fa-save" data-dismiss="modal">Salva</button>
                    <button type="button" @onclick="@(CloseForm)" class="btn btn-primary fas fa-close" data-dismiss="modal">Chiudi</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@if (_tripPopupVisible)
{
    <EditUscitePopup Uscita="_currentTrip" Close="CloseTripPopup" Save="SaveTrip"></EditUscitePopup>
}

@code
{
    [Parameter]
    public Action Save { get; set; }

    [Parameter]
    public Action Close { get; set; }

    [Parameter]
    public Corso Corso { get; set; }


    private bool _showGeneral;
    private bool _showInstructors;
    private bool _showStudents;
    private bool _showTrips;

    private bool _showInstructorsPresence;
    private bool _showStudentsPresence;

    private string _cssGeneral;
    private string _cssInstructors;
    private string _cssStudents;
    private string _cssTrips;
    private string _cssInstructorsPresence;
    private string _cssStudentsPresence;

    private List<Allievo> _students;
    private List<Istruttore> _instructors;
    private List<Istruttore> _selectedInstructors;
    private Uscita _currentTrip;
    private bool _tripPopupVisible = false;

    protected override void OnInitialized()
    {
        _instructors = _istruttoriService.ListIstruttori();
        _students = _allieviService.ListAllievi();
        ResetFlagsAndCss();
        ShowGeneral();
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        foreach (IBrowserFile file in e.GetMultipleFiles(1))
        {
            try
            {
                Stream stream = file.OpenReadStream();
                _students = await _allieviService.LoadFromStream(stream);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }

    private void CloseForm()
    {
        _corsiService.DiscardChanges(Corso);
        Close?.Invoke();
    }

    private void SaveForm()
    {
        _corsiService.AddOrUpdate(Corso);
        Save?.Invoke();
    }

    private void ResetFlagsAndCss()
    {
        _showGeneral = false;
        _showInstructors = false;
        _showStudents = false;
        _showTrips = false;
        _showInstructorsPresence = false;
        _showStudentsPresence = false;

        _cssGeneral = "nav-link";
        _cssInstructors = "nav-link";
        _cssStudents = "nav-link";
        _cssTrips = "nav-link";
        _cssInstructorsPresence = "nav-link";
        _cssStudentsPresence = "nav-link";
    }

    private void ShowGeneral()
    {
        ResetFlagsAndCss();

        _showGeneral = true;
        _cssGeneral = "nav-link active";
    }

    private void ShowInstructors()
    {
        ResetFlagsAndCss();

        _showInstructors = true;
        _cssInstructors = "nav-link active";
    }

    private void ShowStudents()
    {
        ResetFlagsAndCss();

        _showStudents = true;
        _cssStudents = "nav-link active";
    }

    private void ShowTrips()
    {
        ResetFlagsAndCss();

        _showTrips = true;
        _cssTrips = "nav-link active";
    }


    private void OnInstructorsListChanged()
    {
    }


    private void ShowInstructorPresence()
    {
        ResetFlagsAndCss();

        _showInstructorsPresence = true;
        _cssInstructorsPresence = "nav-link active";
    }

    private void ShowStudentsPresence()
    {
        ResetFlagsAndCss();

        _showStudentsPresence = true;
        _cssStudentsPresence = "nav-link active";
    }

    private void OpenTripPopup(Uscita? o)
    {
        if (o == null)
        {
            o = new Uscita();
            o.Corso = Corso;
            Corso.Uscite.Add(o);
        }
        _currentTrip = o;
        _tripPopupVisible = true;
    }

    private void CloseTripPopup()
    {
        _currentTrip = null;
        _tripPopupVisible = false;
        StateHasChanged();
    }

    private void SaveTrip()
    {
        CloseTripPopup();
    }
}